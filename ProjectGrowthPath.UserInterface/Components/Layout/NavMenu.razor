@implements IDisposable
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using ProjectGrowthPath.Application.Interfaces.IServices
@using ProjectGrowthPath.Application.Service
@using System.Text
@using ProjectGrowthPath.Application.DTOs

@inject NavigationManager NavigationManager
@inject IUserSessionService UserSessionService

<nav class="nav-main">
    <div class="logo-holder">
        <a class="" href=""><img src="logosmall.png"/></a>
    </div>
    <div class="nav-buttons">
        <AuthorizeView>
            <Authorized>
                <div class="nav-buttons-authorized">
                    @* Admin-only knoppen *@
                    @if (context.User.IsInRole("Beheerder"))
                    {
                        <div class="nav-item">
                            <NavLink class="nav-link" href="/admin/dashboard">
                                <span class="bi bi-tools" aria-hidden="true"></span> Admin Dashboard
                            </NavLink>
                        </div>
                    }

                    @* Algemene knoppen voor ingelogde gebruikers *@
                    <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Manage">
                            <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                        </NavLink>
                    </div>

                    <div class="nav-item avatar-placeholder">
                        <img class="empty-avatar-placeholder" src="empty-img-cover.jpg"/>
                    </div>

                    @* Uitlogknop *@
                    <div class="nav-item">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken/>
                            <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
                            <button type="submit" class="nav-link">
                                <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Uitloggen
                            </button>
                        </form>
                    </div>
                    <div class="nav-item avatar-placeholder">
                        @if (!string.IsNullOrEmpty(_profilePictureString))
                        {
                            <img class="empty-avatar-placeholder" src="data:image/svg+xml;base64,@_profilePictureString" />
                        }
                        else
                        {
                            <img class="empty-avatar-placeholder" src="empty-img-cover.jpg" />
                        }
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-buttons-not-authorized">
                    <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Register">Registreren</NavLink>
                    </div>
                    <div class="nav-item">
                        <NavLink class="nav-link" href="Account/Login">Inloggen</NavLink>
                    </div>
                    <div class="nav-item avatar-placeholder">
                        <img class="empty-avatar-placeholder" src="/empty-img-cover.jpg" />
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</nav>

@code {
    [CascadingParameter(Name = "UserProfile")]
    public UserProfileDto? UserProfile { get; set; }

    private string? _currentUrl; 
    private string? _profilePictureString;

    protected override async Task OnInitializedAsync()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        Console.WriteLine(UserProfile == null
            ? "Geen profiel gevonden - Nav.razor" 
            : $"Profiel geladen Nav.razor: {UserProfile.Name}");

        
        if (UserProfile?.ProfilePicture != null && UserProfile.ProfilePicture.Length > 0)
        {
            _profilePictureString = Convert.ToBase64String(UserProfile.ProfilePicture);
        }
        else
        {
            _profilePictureString = null;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

