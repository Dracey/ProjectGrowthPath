@page "/competences"
@using ProjectGrowthPath.Application.Service
@using ProjectGrowthPath.Application.DTOs.Competences
@attribute [StreamRendering]
@inject CompetenceService CompetenceService
@rendermode InteractiveServer

<PageTitle>Competences</PageTitle>

<h1>Competences</h1>

@if (!isEditorVisible)
{
    <button @onclick="() => isEditorVisible = !isEditorVisible">Add new competence</button>
}
else
{
    <CompetenceForm ToggleForm="ToggleForm" OnSave="OnSave" />
}

@if (competences == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Category</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var competence in competences)
            {
                <tr>
                    <td>@competence.Name</td>
                    <td>@competence.Description</td>
                    <td>@competence.Category</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteCompetence(competence.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CompetenceDto> competences;
    bool isEditorVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await GetCompetences();
    }

    private async Task GetCompetences()
    {
        competences = await CompetenceService.GetList();
    }

    private void ToggleForm()
    {
        isEditorVisible = !isEditorVisible;
    }

    private async Task OnSave()
    {
        competences = null;
        isEditorVisible = !isEditorVisible;
        await GetCompetences();
    }

    private async Task DeleteCompetence(int id)
    {
        await CompetenceService.Delete(id);
        await GetCompetences();
    }
}