@page "/learning-tools"
@using ProjectGrowthPath.Application.Service
@using ProjectGrowthPath.Application.DTOs.LearningTools
@attribute [StreamRendering]
@inject LearningToolService LearningToolsService
@rendermode InteractiveServer

<PageTitle>Learning Tools</PageTitle>

<h1>Learning Tools</h1>

@if (!isEditorVisible)
{
    <button @onclick="() => isEditorVisible = !isEditorVisible">Add new learning tool</button>
}
else
{
    <LearningToolForm LearningTool="selectedLearningTool" ToggleForm="ToggleForm" OnSave="OnSave" />
}

@if (learningTools == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Name</th>
                <th>Description</th>
                <th>Link</th>
                <th>Difficulty</th>
                <th>Category</th>
                <th>Duration</th>
                <th>Provider</th>
                <th>Competences</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var learningTool in learningTools)
            {
                <tr>
                    <td>
                        <button class="btn btn-danger" @onclick="() => EditLearningTool(learningTool)">Edit</button>
                    </td>
                    <td>@learningTool.Name</td>
                    <td>@learningTool.Description</td>
                    <td>@learningTool.Link</td>
                    <td>@learningTool.Difficulty</td>
                    <td>@learningTool.Category</td>
                    <td>@learningTool.Duration</td>
                    <td>@learningTool.Provider</td>
                    <td>@CompileCompetences(learningTool)</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeleteLearningTool(learningTool.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<LearningToolDto> learningTools;
    private LearningToolDto selectedLearningTool = new LearningToolDto();
    bool isEditorVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await GetLearningTools();
    }

    private async Task GetLearningTools()
    {
        learningTools = await LearningToolsService.GetList();
    }

    private void ToggleForm()
    {
        isEditorVisible = !isEditorVisible;
    }

    private async Task OnSave()
    {
        learningTools = null;
        isEditorVisible = !isEditorVisible;
        await GetLearningTools();
    }

    private async Task DeleteLearningTool(int id)
    {
        await LearningToolsService.Delete(id);
        await GetLearningTools();
    }

    private void EditLearningTool(LearningToolDto learningTool)
    {
        // Open the form with the selected learning tool data
        selectedLearningTool = learningTool;
        isEditorVisible = true;
    }

    private string CompileCompetences(LearningToolDto learningTool)
    {
        return string.Join(", ", learningTool.Competences .Select(e => e.Name));
    }
}