@using System.ComponentModel.DataAnnotations
@using System.Net
@using Humanizer
@using MudBlazor
@using ProjectGrowthPath.Application.DTOs.LearningTools
@using ProjectGrowthPath.Application.Interfaces
@using ProjectGrowthPath.Application.Interfaces.IServices
@using ProjectGrowthPath.Application.Service
@using ProjectGrowthPath.Application.State
@using ProjectGrowthPath.Domain.Entities
@using ProjectGrowthPath.Domain.Enums.LearningTools
@using ProjectGrowthPath.UserInterface.Components

@inject LearningToolService LearningToolService
@inject IFirstTimeSetupService SetupService
@inject SetupStateStore StateStorage
@inject IDialogService DialogService
@inject ILearningToolSetupHelper LearningToolSetupHelper

<h3>Leermiddelen!</h3>
<p>Kies leermiddelen uit om te helpen met het verbeteren van jouw keuze!</p>
@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <div class="tool-list-container">
        <MudGrid Justify="Justify.Center" Gutter="GutterSize.Medium" Wrap="Wrap.Wrap">
            @foreach (var tool in learningToolDtos)
            {
                <MudItem xs="12" sm="6" md="4" lg="3" Class="d-flex">
                    <MudCard Style="@GetCardStyle(tool.Id)"
                             OnClick="() => ToggleToolSelection(tool.Id)">
                        <div class="image-text-holder">
                            <img src="@LearningToolSetupHelper.GetImagePath((CategoryTool)tool.Category)" class="image-tool" />
                            <div class="black-trans-box"></div>
                            <div class="tool-header-text">
                                <MudText Typo="Typo.h6" Class="m-0">@tool.Name</MudText>
                            </div>
                        </div>
                        <MudCardContent>
                            <div class="tool-content-holder">
                                <MudChip T="string" Color="Color.Info" Variant="Variant.Outlined">
                                    @LearningToolSetupHelper.GetCategoryOfTool((CategoryTool)tool.Category)
                                </MudChip>

                                <MudChip T="string" Color="Color.Info" Variant="Variant.Outlined">
                                    @LearningToolSetupHelper.GetDifficultyLabel((DifficultyTool)tool.Difficulty)
                                </MudChip>

                                <MudChip T="string" Color="Color.Secondary" Variant="Variant.Filled">
                                    @if (tool.Duration == 0)
                                    {
                                        @("<60 minuten")
                                    }
                                    else
                                    {
                                        @($"{tool.Duration} uur")
                                    }
                                </MudChip>
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled"
                                       Color="@(IsSelected(tool.Id) ? Color.Error : Color.Primary)"
                                       OnClick="() => ToggleToolSelection(tool.Id)">
                                @(IsSelected(tool.Id) ? "Verwijderen" : "Selecteer")
                            </MudButton>
                            <MudButton Variant="Variant.Text" OnClick="() => ShowDetails(tool)">Meer info</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    </div>
    <p>Wanneer denk je dit voor elkaar te hebben?</p>
    <MudDatePicker @ref="_picker" Label="Selecteer een datum" Date="_date" DateChanged="SelectDate" AutoClose="@_autoClose">
        <PickerActions>
            <MudButton Class="mr-auto align-self-start" OnClick="@(() => _picker.ClearAsync())">Verwijderen</MudButton>
            <MudButton OnClick="@(() => _picker.CloseAsync(false))">Annuleren</MudButton>
            <MudButton Color="Color.Primary" OnClick="@(() => _picker.CloseAsync())">Selecteren</MudButton>
        </PickerActions>
    </MudDatePicker>

}

<div class="mt-4">
    <button class="btn btn-outline-secondary me-2" @onclick="() => OnBack.InvokeAsync()">Terug</button>
    <button class="btn btn-success" @onclick="() => OnNext.InvokeAsync()" disabled="@(!CanProceed)">Volgende</button>
</div>


@code {
    [Parameter] public EventCallback OnNext { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }

    // Laden en valideren van de pagina
    private bool IsLoading = true;
    private bool CanProceed = false;
    private bool IsSelected(int toolId) => StateStorage.CurrentState.SelectedTools.Contains(toolId);

    private List<LearningToolDto> learningToolDtos = new List<LearningToolDto>();


    // De datum die is geselecteerd door de gebruiker
    private MudDatePicker _picker;
    private DateTime? _date = DateTime.Today;
    private bool _autoClose;

    protected override async Task OnInitializedAsync()
    {
        await StateStorage.LoadAsync();

        learningToolDtos = await LearningToolService.GetByCompetenceId(StateStorage.CurrentState.ChosenCompetence.CompetenceID);


        if (StateStorage.CurrentState.TargetDate != null)
        {
            _date = StateStorage.CurrentState.TargetDate;
        }
        else
        {
            _date = DateTime.Today;
        }

        IsLoading = false;
        CanProceed = StateStorage.CurrentState.SelectedTools.Any();

        await InvokeAsync(StateHasChanged);
    }

    private async Task ToggleToolSelection(int toolId)
    {
        await SetupService.ToggleLearningToolAsync(toolId);

        await StateStorage.LoadAsync(); // herlaad state na mutatie
        CanProceed = StateStorage.CurrentState.SelectedTools.Any();
        StateHasChanged();
    }

    private void ShowDetails(LearningToolDto tool)
    {
        var parameters = new DialogParameters { ["Tool"] = tool };
        DialogService.Show<LearningToolDetailOverlay>("Meer informatie", parameters);
    }

    private string GetCardStyle(int toolId)
    {
        var borderColor = IsSelected(toolId) ? "2px solid #4caf50" : "1px solid lightgray";
        return $"cursor: pointer; width: 100%; min-width: 170px; max-width: 250px; height: 100%; position: relative; border: {borderColor};";
    }

    private async Task SelectDate(DateTime? date)
    {
        if (date.HasValue)
        {
            _date = date;
            await SetupService.SetTargetDateAsync(date.Value);
        }
    }
    
}
