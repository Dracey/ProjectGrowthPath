@using ProjectGrowthPath.Application.Service
@using System.ComponentModel.DataAnnotations
@using Humanizer
@using ProjectGrowthPath.Application.Interfaces
@using ProjectGrowthPath.Application.State
@using ProjectGrowthPath.Domain.Entities
@using MudBlazor


@inject FirstTimeSetupService SetupService
@inject SetupStateStore StateStorage
@inject ICompetenceRepository CompetenceRepository
@implements IDisposable

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />


@if (IsLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else
{
    <h3>Kies 3 vaardigheden waarin je interesse hebt.</h3>
    <p>Geen zorgen, later kan je meer kiezen!</p>
    <MudGrid>
        <MudItem xs="12">
            <MudAutocomplete T="Competence"
                             Label="Eerste keuze"
                             @bind-value="comp1"
                             SearchFunc="SearchForComp1"
                             ToStringFunc="@(c=> c==null?null : $"{c.Name} ({c.Description})")"
                             Clearable=true/>
        </MudItem>
        <MudItem xs="12" >
            <MudAutocomplete T="Competence"
                             Label="Tweede keuze"
                             @bind-value="comp2"
                             SearchFunc="SearchForComp2"
                             ToStringFunc="@(c=> c==null?null : $"{c.Name} ({c.Description})")" 
                             Clearable=true/>
        </MudItem>
        <MudItem xs="12">
            <MudAutocomplete T="Competence"
                             Label="Derde keuze"
                             @bind-value="comp3"
                             SearchFunc="SearchForComp3"
                             ToStringFunc="@(c=> c==null?null : $"{c.Name} ({c.Description})")" 
                             Clearable=true/>
        </MudItem>
        <MudItem xs="12" md="12">
            <MudText Class="mb-n3" Typo="Typo.body2">
                Selectie van interesses: 
                <MudChip T="string">@(comp1?.Name ?? "Niet geselecteerd")</MudChip>
                <MudChip T="string">@(comp2?.Name ?? "Niet geselecteerd")</MudChip>
                <MudChip T="string">@(comp3?.Name ?? "Niet geselecteerd")</MudChip>
            </MudText>
        </MudItem>
    </MudGrid>

    <div class="mt-4">
        <button class="btn btn-outline-secondary me-2" @onclick="() => OnBack.InvokeAsync()">Terug</button>
        <button class="btn btn-success" @onclick="() => OnNext.InvokeAsync()" disabled="@(!CanProceed)">Volgende</button>
    </div>
}


@code {
    [Parameter] public EventCallback OnNext { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }
    private Competence comp1, comp2, comp3;
    private bool _disposed;
    private bool IsLoading = true;
    private bool CanProceed => comp1 != null && comp2 != null && comp3 != null
                               && comp1 != comp2 && comp1 != comp3 && comp2 != comp3;



    private List<Competence> AllCompetences { get; set; } = new();
    private List<Competence> SelectedCompetences { get; set; } = new();

    public void Dispose()
    {
        _disposed = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var competences = await CompetenceRepository.GetAllAsync();

        if (_disposed) return;

        AllCompetences = competences;

        IsLoading = false;
        await InvokeAsync(StateHasChanged);
    }

    private IEnumerable<Competence> GetAvailableCompetences(params Competence[] exclude)
    {
        return AllCompetences
            .Where(c => !exclude.Contains(c))
            .ToList();
    }

    private Task<IEnumerable<Competence>> SearchForComp1(string value, CancellationToken token)
    {
        return Task.FromResult(FilterCompetences(value, GetAvailableCompetences(comp2, comp3)));
    }

    private Task<IEnumerable<Competence>> SearchForComp2(string value, CancellationToken token)
    {
        return Task.FromResult(FilterCompetences(value, GetAvailableCompetences(comp1, comp3)));
    }

    private Task<IEnumerable<Competence>> SearchForComp3(string value, CancellationToken token)
    {
        return Task.FromResult(FilterCompetences(value, GetAvailableCompetences(comp1, comp2)));
    }

    private IEnumerable<Competence> FilterCompetences(string value, IEnumerable<Competence> source)
    {
        if (string.IsNullOrWhiteSpace(value))
            return source;

        return source
            .Where(c => c.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase))
            .ToList();
    }

    private async Task OnCompetenceSelected(Competence selected)
    {
        if (SelectedCompetences.Count < 3 && !SelectedCompetences.Contains(selected))
            SelectedCompetences.Add(selected);

        StateHasChanged();
    }
    private void RemoveCompetence(Competence comp)
    {
        SelectedCompetences.Remove(comp);
    }
}
