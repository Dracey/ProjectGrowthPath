// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectGrowthPath.Infrastructure.Persistence;

#nullable disable

namespace ProjectGrowthPath.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Competence", b =>
                {
                    b.Property<Guid>("CompetenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CompetenceID");

                    b.ToTable("Competences");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Goal", b =>
                {
                    b.Property<Guid>("GoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("GoalID");

                    b.HasIndex("UserID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.GoalLearningTool", b =>
                {
                    b.Property<Guid>("GoalToolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GoalID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LearningToolID")
                        .HasColumnType("uuid");

                    b.HasKey("GoalToolID");

                    b.HasIndex("GoalID");

                    b.HasIndex("LearningToolID");

                    b.ToTable("GoalLearningTools");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.LearningTool", b =>
                {
                    b.Property<Guid>("LearningToolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LearningToolID");

                    b.ToTable("LearningTools");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.ToolCompetence", b =>
                {
                    b.Property<Guid>("ToolCompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetenceID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LearningToolID")
                        .HasColumnType("uuid");

                    b.HasKey("ToolCompID");

                    b.HasIndex("CompetenceID");

                    b.HasIndex("LearningToolID");

                    b.ToTable("ToolCompetences");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserBadge", b =>
                {
                    b.Property<Guid>("UserBadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BadgeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("UserBadgeID");

                    b.HasIndex("UserID");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserCompetence", b =>
                {
                    b.Property<Guid>("UserCompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompetenceID")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("UserCompID");

                    b.HasIndex("CompetenceID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCompetences");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("bytea");

                    b.HasKey("UserID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Goal", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("Goals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.GoalLearningTool", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.Goal", "Goal")
                        .WithMany("GoalLearningTools")
                        .HasForeignKey("GoalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGrowthPath.Domain.Entities.LearningTool", "LearningTool")
                        .WithMany("GoalLearningTools")
                        .HasForeignKey("LearningToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("LearningTool");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.ToolCompetence", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGrowthPath.Domain.Entities.LearningTool", "LearningTool")
                        .WithMany("ToolCompetences")
                        .HasForeignKey("LearningToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("LearningTool");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserBadge", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.UserProfile", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserCompetence", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGrowthPath.Domain.Entities.UserProfile", "User")
                        .WithMany("Competences")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Goal", b =>
                {
                    b.Navigation("GoalLearningTools");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.LearningTool", b =>
                {
                    b.Navigation("GoalLearningTools");

                    b.Navigation("ToolCompetences");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Competences");

                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
