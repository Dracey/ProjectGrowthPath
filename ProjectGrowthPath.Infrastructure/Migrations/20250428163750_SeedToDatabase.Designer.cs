// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectGrowthPath.Infrastructure.Persistence;

#nullable disable

namespace ProjectGrowthPath.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428163750_SeedToDatabase")]
    partial class SeedToDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Competence", b =>
                {
                    b.Property<int>("CompetenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CompetenceID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CompetenceID");

                    b.ToTable("Competences");

                    b.HasData(
                        new
                        {
                            CompetenceID = 1,
                            Category = "SoftSkill",
                            Description = "Effectief samenwerken met collega’s en teams.",
                            Name = "Samenwerken"
                        },
                        new
                        {
                            CompetenceID = 2,
                            Category = "SoftSkill",
                            Description = "Duidelijk en effectief communiceren, zowel schriftelijk als mondeling.",
                            Name = "Communicatie"
                        },
                        new
                        {
                            CompetenceID = 3,
                            Category = "SoftSkill",
                            Description = "In staat zijn om gestructureerd problemen te analyseren en op te lossen.",
                            Name = "Probleemoplossend vermogen"
                        },
                        new
                        {
                            CompetenceID = 4,
                            Category = "SoftSkill",
                            Description = "Plannen, structureren en prioriteiten stellen in taken en projecten.",
                            Name = "Organiseren"
                        },
                        new
                        {
                            CompetenceID = 5,
                            Category = "HardSkill",
                            Description = "Schrijven en onderhouden van softwareapplicaties met C# en .NET.",
                            Name = "C# Ontwikkeling"
                        },
                        new
                        {
                            CompetenceID = 6,
                            Category = "HardSkill",
                            Description = "Werken met relationele databases, SQL en datamodellering.",
                            Name = "Databasebeheer"
                        },
                        new
                        {
                            CompetenceID = 7,
                            Category = "HardSkill",
                            Description = "Begrijpen van beveiligingsprincipes, zoals authenticatie, autorisatie en veilige codering.",
                            Name = "Security awareness"
                        },
                        new
                        {
                            CompetenceID = 8,
                            Category = "HardSkill",
                            Description = "Basiskennis van cloudplatformen zoals Azure of AWS.",
                            Name = "Cloud computing"
                        },
                        new
                        {
                            CompetenceID = 9,
                            Category = "HardSkill",
                            Description = "Ontwerpen van schaalbare, onderhoudbare software volgens design patterns en principes.",
                            Name = "Softwarearchitectuur"
                        },
                        new
                        {
                            CompetenceID = 10,
                            Category = "SoftSkill",
                            Description = "Anderen aansturen, inspireren en richting geven aan een team of project.",
                            Name = "Leiderschap"
                        },
                        new
                        {
                            CompetenceID = 11,
                            Category = "HardSkill",
                            Description = "Kennis van de Scrum-methodiek en ervaring met werken in Agile teams.",
                            Name = "Scrum"
                        },
                        new
                        {
                            CompetenceID = 12,
                            Category = "SoftSkill",
                            Description = "Het systematisch plannen, uitvoeren en opleveren van projecten.",
                            Name = "Projectmatig werken"
                        },
                        new
                        {
                            CompetenceID = 13,
                            Category = "HardSkill",
                            Description = "Het ontwerpen en structureren van software volgens Clean Architecture principes.",
                            Name = "Clean Architecture"
                        },
                        new
                        {
                            CompetenceID = 14,
                            Category = "HardSkill",
                            Description = "Kennis van het bouwen van interactieve webapplicaties met Blazor WebAssembly.",
                            Name = "Blazor ontwikkeling"
                        },
                        new
                        {
                            CompetenceID = 15,
                            Category = "HardSkill",
                            Description = "Inzicht in CI/CD, automatisering van deployments en samenwerking tussen Dev en Ops.",
                            Name = "DevOps basiskennis"
                        },
                        new
                        {
                            CompetenceID = 16,
                            Category = "HardSkill",
                            Description = "Versiebeheer beheersen met Git, inclusief branching, commits en pull requests.",
                            Name = "Git & versiebeheer"
                        });
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Goal", b =>
                {
                    b.Property<int>("GoalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GoalID"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("GoalID");

                    b.HasIndex("UserID");

                    b.ToTable("Goals");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.GoalLearningTool", b =>
                {
                    b.Property<int>("GoalToolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GoalToolID"));

                    b.Property<int>("GoalID")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("LearningToolID")
                        .HasColumnType("integer");

                    b.HasKey("GoalToolID");

                    b.HasIndex("GoalID");

                    b.HasIndex("LearningToolID");

                    b.ToTable("GoalLearningTools");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.LearningTool", b =>
                {
                    b.Property<int>("LearningToolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LearningToolID"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LearningToolID");

                    b.ToTable("LearningTools");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.LearningToolCompetence", b =>
                {
                    b.Property<int>("LearningToolCompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LearningToolCompID"));

                    b.Property<int>("CompetenceID")
                        .HasColumnType("integer");

                    b.Property<int>("LearningToolID")
                        .HasColumnType("integer");

                    b.HasKey("LearningToolCompID");

                    b.HasIndex("CompetenceID");

                    b.HasIndex("LearningToolID");

                    b.ToTable("ToolCompetences");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserBadge", b =>
                {
                    b.Property<int>("UserBadgeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserBadgeID"));

                    b.Property<string>("BadgeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("UserBadgeID");

                    b.HasIndex("UserID");

                    b.ToTable("UserBadges");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserCompetence", b =>
                {
                    b.Property<int>("UserCompID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserCompID"));

                    b.Property<int>("CompetenceID")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.HasKey("UserCompID");

                    b.HasIndex("CompetenceID");

                    b.HasIndex("UserID");

                    b.ToTable("UserCompetences");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("bytea");

                    b.HasKey("UserID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Goal", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.UserProfile", "UserProfile")
                        .WithMany("Goals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.GoalLearningTool", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.Goal", "Goal")
                        .WithMany("GoalLearningTools")
                        .HasForeignKey("GoalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGrowthPath.Domain.Entities.LearningTool", "LearningTool")
                        .WithMany("GoalLearningTools")
                        .HasForeignKey("LearningToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goal");

                    b.Navigation("LearningTool");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.LearningToolCompetence", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGrowthPath.Domain.Entities.LearningTool", "LearningTool")
                        .WithMany("ToolCompetences")
                        .HasForeignKey("LearningToolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("LearningTool");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserBadge", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.UserProfile", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserCompetence", b =>
                {
                    b.HasOne("ProjectGrowthPath.Domain.Entities.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectGrowthPath.Domain.Entities.UserProfile", "User")
                        .WithMany("Competences")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.Goal", b =>
                {
                    b.Navigation("GoalLearningTools");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.LearningTool", b =>
                {
                    b.Navigation("GoalLearningTools");

                    b.Navigation("ToolCompetences");
                });

            modelBuilder.Entity("ProjectGrowthPath.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Badges");

                    b.Navigation("Competences");

                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
